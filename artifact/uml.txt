@startuml
!theme materia

title Backend Models and Relationships (Reflecting Code Structure)

package "Entities" {
  class Ticket {
    + ticketId: Integer <<PK>>
    + employeeId: String <<FK to User.personalNo>>
    + managerId: String <<FK to User.personalNo>>
    + costType: String
    + amount: BigDecimal
    --
    + Ticket()
    + Ticket(employeeId: String, managerId: String, costType: String, amount: BigDecimal)
  }

  class ApproveHistory {
    + id: Integer <<PK>>
    + date: LocalDate
    + status: ApproveHistory.Status
    + description: String
    --
    + ApproveHistory()
    + ApproveHistory(ticket: Ticket, date: LocalDate, status: Status, description: String, actor: User)
  }

  enum "ApproveHistory.Status" as ApproveHistoryStatus {
    SENT_TO_MANAGER
    REJECTED_BY_MANAGER_CAN_BE_FIXED
    CLOSED_AS_REJECTED_BY_MANAGER
    SENT_TO_ACCOUNTANT
    CLOSED_AS_APPROVED
    REJECTED_BY_ACCOUNTANT_CAN_BE_FIXED
    CLOSED_AS_REJECTED_BY_ACCOUNTANT
    CANCELED_BY_USER
    --
    + {static} getClosedStatus(): List<Status>
    + {static} getTeamMemberCancelableStatus(): List<Status>
    + {static} getTeamMemberEditableStatus(): List<Status>
    + {static} getManagerCancelableStatus(): List<Status>
    + {static} getManagerEditableStatus(): List<Status>
    + {static} getAccountantEditableStatus(): List<Status>
  }

  class User {
    + personalNo: String <<PK>>
    + name: String  ' Inferred from employeeService.getEmployeeByPersonalNo().getName()'
    + surname: String ' Inferred from employeeService.getEmployeeByPersonalNo().getSurname()'
    + userType: User.UserType ' Inferred from currentUser.getUserType()'
    ' department: Department ' Object inferred from employee.getDepartment()'
  }

  enum "User.UserType" as UserTypeEnum {
    TEAM_MEMBER ' from TicketController: User.UserType.team_member'
    MANAGER     ' from TicketController: User.UserType.manager'
    ACCOUNTANT  ' from TicketController: User.UserType.accountant'
  }

  class Department {
    + deptId: Integer <<PK>> ' Inferred from department.getDeptId() and repo queries'
    + deptName: String ' Inferred from departmentService.existsByDeptname()'
    ' deptManager: User ' Object inferred from department.getDeptManager()'
    + remainingBudget: BigDecimal ' Inferred from department.getRemainingBudget()'
    + initialBudget: BigDecimal ' Inferred from departmentService.setDepartmentInitialBudget(), assuming BigDecimal'
  }

  class Attachment {
    + id: Integer <<PK>> ' Assumed for an Entity'
    ' ticket: Ticket ' Object inferred from Ticket.attachment and attachment.setTicket()'
    + invoice: byte[] ' Inferred from attachment.getInvoice() and request.getInvoice()'
  }

  class Notification {
    + id: Integer <<PK>> ' From NotificationRepository JpaRepository<Notification, Integer>'
    + type: Notification.NotificationType ' Inferred from Notification.NotificationType.DEPARTMENT'
    + targetId: String ' From NotificationRepository query n.targetId'
    + message: String ' Inferred from notificationService.createNotification()'
  }

  enum "Notification.NotificationType" as NotificationTypeEnum {
    ALL          ' from NotificationRepository query'
    DEPARTMENT   ' from NotificationRepository query and controller usage'
    EMPLOYEE     ' from NotificationRepository query and controller usage'
    ACCOUNTANT   ' from NotificationRepository query and controller usage'
  }

  class BudgetByCostType {
    + id: Integer <<PK>> ' Inferred from approveHistoryService.getApprovedExpensesByCostType(costTypeId)'
    + typeName: String ' Inferred from budgetByCostTypeService.getByTypeName()'
    + initialBudget: BigDecimal ' Inferred from AccountantController parameters, assuming BigDecimal'
    + remainingBudget: BigDecimal ' Inferred from budgetByCostType.getRemainingBudget()'
    + maxCost: BigDecimal ' Inferred from budgetByCostType.getMaxCost()'
  }
}

' --- Relationships from @Entity annotations in provided model files (Ticket.java, ApproveHistory.java) ---
Ticket "1" o-- "*" ApproveHistory : "history (Ticket.history)"
Ticket "1" o-- "1" Attachment : "attachment (Ticket.attachment)"

ApproveHistory "*" o-- "1" Ticket : "ticket (ApproveHistory.ticket)"
ApproveHistory "*" o-- "1" User : "actor (ApproveHistory.actor)"

' --- Inferred Object Relationships (based on service/controller usage implying direct object access/association) ---
User "1" --o "1" Department : "department" ' Implied by `employee.getDepartment()` returning a Department object'
Department "1" --o "1" User : "deptManager" ' Implied by `department.getDeptManager()` returning a User object'
Attachment "1" --o "1" Ticket : "ticket"     ' Implied by `Ticket.attachment` being the inverse side of a OneToOne'

' --- Enum Usage (Dependency) ---
ApproveHistory ..> ApproveHistoryStatus : "uses"
User ..> UserTypeEnum : "uses"
Notification ..> NotificationTypeEnum : "uses"

' --- Notes ---
' - <<PK>> denotes a Primary Key.
' - <<FK to ...>> denotes a Foreign Key relationship where the model stores an ID.
' - For models where the full .java file was not provided (User, Department, Attachment, Notification, BudgetByCostType),
'   attributes and direct object relationships are inferred from their usage in the provided code snippets.
' - Methods listed are constructors explicitly defined in the provided model files.
'   Lombok's @Data on Ticket and ApproveHistory implies standard getters, setters, etc., which are not explicitly listed here.
' - Relationships like Ticket.employeeId (String) pointing to User.personalNo (String) are conceptual FKs.
'   A solid line with composition/aggregation (o--) is used when a model class holds a direct object reference to another model.

@enduml
