@startuml
!theme materia

title Backend Models and Relationships

package "Entities" {
  class Ticket {
    ticketId: Integer
    employeeId: String
    managerId: String
    costType: String
    amount: BigDecimal
    --
    Ticket()
    getTicketId()
    getEmployeeId()
    getCostType()
    getAmount()
    getHistory()
    getAttachment()
    getLastStatus()
    updateStatus()
  }

  class ApproveHistory {
    id: Integer
    date: LocalDate
    status: Status
    description: String
    --
    ApproveHistory()
    getId()
    getStatus()
    getTicket()
    getActor()
    setStatus()
    setDescription()
  }

  enum ApproveHistoryStatus {
    SENT_TO_MANAGER
    REJECTED_BY_MANAGER_CAN_BE_FIXED
    CLOSED_AS_REJECTED_BY_MANAGER
    SENT_TO_ACCOUNTANT
    CLOSED_AS_APPROVED
    REJECTED_BY_ACCOUNTANT_CAN_BE_FIXED
    CLOSED_AS_REJECTED_BY_ACCOUNTANT
    CANCELED_BY_USER
    --
    getClosedStatus()
    getTeamMemberCancelableStatus()
    getManagerEditableStatus()
  }

  class User {
    personalNo: String
    name: String
    surname: String
    userType: UserType
    --
    getPersonalNo()
    getName()
    getUserType()
    getFullName()
    isManager()
    isAccountant()
    isTeamMember()
  }

  class Employee {
    personalNo: String
    name: String
    surname: String
    departmentId: Integer
    managerId: String
    --
    getPersonalNo()
    getName()
    getSurname()
    getDepartment()
    getManager()
    getFullName()
  }

  enum UserTypeEnum {
    TEAM_MEMBER
    MANAGER
    ACCOUNTANT
    --
    getAuthority()
  }

  class Department {
    deptId: Integer
    deptName: String
    managerId: String
    remainingBudget: BigDecimal
    initialBudget: BigDecimal
    --
    getDeptId()
    getDeptName()
    getManagerId()
    getManager()
    getEmployees()
    getRemainingBudget()
    updateRemainingBudget()
    canAfford()
  }

  class Attachment {
    id: Integer
    ticketId: Integer
    invoice: byte[]
    --
    getId()
    getInvoice()
    getTicket()
    setInvoice()
  }

  class Notification {
    id: Integer
    type: NotificationType
    targetId: String
    message: String
    createdAt: LocalDateTime
    isRead: Boolean
    --
    getId()
    getType()
    getMessage()
    getIsRead()
    markAsRead()
  }

  enum NotificationTypeEnum {
    ALL
    DEPARTMENT
    EMPLOYEE
    ACCOUNTANT
  }

  class BudgetByCostType {
    id: Integer
    typeName: String
    initialBudget: BigDecimal
    remainingBudget: BigDecimal
    maxCost: BigDecimal
    --
    getTypeName()
    getRemainingBudget()
    updateRemainingBudget()
    canCover()
    exceedsMaxCost()
  }
}

package "Services" {
  class TicketService {
    createTicket()
    getTicketById()
    getTicketsByEmployeeId()
    getTicketsByManagerId()
    getAllTickets()
    getTicketsByStatus()
    updateTicket()
    deleteTicket()
    approveTicket()
    rejectTicket()
    cancelTicket()
  }

  class ApproveHistoryService {
    createApproveHistory()
    getApproveHistoriesByTicket()
    getApprovedExpensesByCostType()
    getLastHistoryByTicketId()
  }
  
  class UserService {
    getUserByPersonalNo()
    getCurrentUser()
    getAllManagers()
    getAllAccountants()
    registerUser()
    updateUserRole()
  }

  class EmployeeService {
    getEmployeeByPersonalNo()
    getAllEmployees()
    getEmployeesByDepartment()
    getEmployeesByManager()
    createEmployee()
    updateEmployee()
  }

  class DepartmentService {
    getDepartmentById()
    getAllDepartments()
    createDepartment()
    getDepartmentByManagerId()
    setDepartmentInitialBudget()
    updateRemainingBudget()
    assignManager()
  }

  class AttachmentService {
    saveAttachment()
    getAttachmentByTicketId()
    uploadInvoice()
    downloadInvoice()
  }

  class NotificationService {
    createNotification()
    getNotificationsForUser()
    getNotificationsForDepartment()
    getUnreadNotifications()
    markAsRead()
    markAllAsRead()
  }

  class BudgetByCostTypeService {
    createBudgetByCostType()
    getByTypeName()
    getAllCostTypes()
    updateBudget()
    checkIfExpenseAllowed()
  }
}

' Entity Relationships
Ticket "1" o--> "*" ApproveHistory : has history
Ticket "1" o--> "1" Attachment : has attachment
ApproveHistory "*" --> "1" Ticket : belongs to
ApproveHistory "*" --> "1" User : acted by

' User-Employee-Department Relationships
Department "1" <-- "*" Employee : belongs to
Department "1" --> "1" User : managed by
Employee "*" --> "1" Employee : reports to
User "1" --> "1" Employee : represents

' Service relationships
TicketService --> Ticket : manages
ApproveHistoryService --> ApproveHistory : manages
UserService --> User : manages
EmployeeService --> Employee : manages
DepartmentService --> Department : manages
AttachmentService --> Attachment : manages
NotificationService --> Notification : manages
BudgetByCostTypeService --> BudgetByCostType : manages

' Type relationships
ApproveHistory --> ApproveHistoryStatus : uses
User --> UserTypeEnum : has type
Notification --> NotificationTypeEnum : has type

@enduml